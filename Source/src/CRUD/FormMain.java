/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CRUD;

import java.text.NumberFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author joao.v.silva
 */
public class FormMain extends javax.swing.JFrame {

    /**
     * Creates new form FormMain
     */
    ConexaoPostGres con;
    NumberFormat format;
    boolean cargoValido;
    boolean emFiltro;
    Funcionario funcAtual;

    public FormMain() {
        initComponents();

        con = new ConexaoPostGres();
        format = NumberFormat.getCurrencyInstance();
        cargoValido = false;
        emFiltro = false;

        this.setLocationRelativeTo(null);
        this.setVisible(true);

        carregarFuncionario(1, emFiltro);
        atualizarQuantidadeRegistros();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtCargo = new javax.swing.JTextField();
        lblDescCargo = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCPF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtSalario = new javax.swing.JTextField();
        btnSair = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnIncluir = new javax.swing.JButton();
        btnProximo = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnFiltrar = new javax.swing.JButton();
        btnSairFiltro = new javax.swing.JButton();
        lblTotalRegistros = new javax.swing.JLabel();
        lblFiltro = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRUD - BD-II");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Funcionario"));

        txtCargo.setEditable(false);
        txtCargo.setToolTipText("");
        txtCargo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCargoFocusLost(evt);
            }
        });
        txtCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCargoActionPerformed(evt);
            }
        });

        lblDescCargo.setText("Descrição Cargo");

        txtNome.setEditable(false);
        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        txtCPF.setEditable(false);
        txtCPF.setToolTipText("");
        txtCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPFActionPerformed(evt);
            }
        });

        jLabel1.setText("CPF:");

        jLabel2.setText("Nome:");

        jLabel3.setText("Cargo:");

        jLabel4.setText("Salário:");

        txtSalario.setEditable(false);
        txtSalario.setToolTipText("");
        txtSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblDescCargo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtSalario)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCPF)
                            .addComponent(txtNome))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescCargo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnIncluir.setText("Incluir");
        btnIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirActionPerformed(evt);
            }
        });

        btnProximo.setText("Próximo");
        btnProximo.setEnabled(false);
        btnProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximoActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.setEnabled(false);
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtragem"));

        btnFiltrar.setText("Filtrar");
        btnFiltrar.setEnabled(false);
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        btnSairFiltro.setText("Sair Filtro");
        btnSairFiltro.setEnabled(false);
        btnSairFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFiltrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSairFiltro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFiltrar)
                    .addComponent(btnSairFiltro))
                .addContainerGap())
        );

        lblTotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotalRegistros.setText("0 Registro(s) no Banco");

        lblFiltro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFiltro.setText(" ");

        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAnterior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProximo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIncluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSair)
                                .addGap(0, 10, Short.MAX_VALUE))
                            .addComponent(lblFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotalRegistros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAnterior)
                        .addComponent(btnProximo)
                        .addComponent(btnIncluir))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnModificar)
                        .addComponent(btnExcluir)
                        .addComponent(btnSair)))
                .addGap(18, 18, 18)
                .addComponent(lblFiltro)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        con.fecharConexao();
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        btnSairActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void btnIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirActionPerformed

        Funcionario f;

        Boolean inseriu = false;

        if (btnIncluir.getText().equals("Incluir")) {

            limparCampos();
            ativarCampos();
            bloquearBotoesInsercao();

            txtCPF.requestFocus();

            ajustarInclusao(0);

        } else {

            String cpf = txtCPF.getText().trim();
            String nome = txtNome.getText().trim();
            int cargo = 0;
            double salario = 0;

            f = validaCampos(cpf, nome, cargo, salario);

            if (f == null) {
                return;
            }

            if (f != null && !cargoValido) {

                txtCargo.requestFocus();
                return;

            }

            inseriu = con.inserirRegistro(f);

            if (inseriu) {

                desbloquearBotoesInsercao();

                ajustarInclusao(1);

                ativarBotoes();

                carregarUltimoFuncionario();

            } else {

                txtCPF.requestFocus();

            }

        }

        atualizarQuantidadeRegistros();

    }//GEN-LAST:event_btnIncluirActionPerformed

    private void btnProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximoActionPerformed
        bloquearCampos();
        ajustarInclusao(1);
        ajustarModificacao(1);
        ajustarFiltro(1);
        carregarFuncionario(1, emFiltro);

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnProximoActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        bloquearCampos();
        ajustarInclusao(1);
        ajustarModificacao(1);
        ajustarFiltro(1);
        carregarFuncionario(-1, emFiltro);

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        String cpf = txtCPF.getText();

        cpf = tratamentoCPF(cpf);

        if (cpf == null || cpf.equals("")) {

            JOptionPane.showMessageDialog(null, "Selecione um funcionario a excluir");
            return;

        }

        con.excluirRegistro(cpf);

        carregarFuncionario(1, emFiltro);

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void txtCargoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCargoFocusLost

        String descCargo;

        if (evt != null && evt.getOppositeComponent() == btnAnterior || evt.getOppositeComponent() == btnProximo) {

            return;

        }

        try {

            int idCargo = Integer.parseInt(txtCargo.getText().trim());

            descCargo = con.recuperarCargo(idCargo);

            if (descCargo == null) {

                JOptionPane.showMessageDialog(null, "Cargo não encontrado");
                cargoValido = false;

                limparCamposCargo();

                return;

            }

            lblDescCargo.setText(descCargo);
            cargoValido = true;

        } catch (NumberFormatException ex) {

            JOptionPane.showMessageDialog(null, "Digite um valor válido para o cargo");
            cargoValido = false;

            limparCamposCargo();

            System.out.println(ex.getMessage());

            return;
        }


    }//GEN-LAST:event_txtCargoFocusLost

    private void txtSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalarioActionPerformed

        if (btnModificar.getText().equals("Gravar")) {
            btnModificarActionPerformed(evt);
        } else {
            btnIncluirActionPerformed(evt);
        }


    }//GEN-LAST:event_txtSalarioActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed

        String cpf;
        String nome;
        String cargo;
        boolean cpfValido;

        if (btnFiltrar.getText().equals("Filtrar")) {

            limparCampos();
            bloquearCampos();
            bloquearIncluirExcluir();
            ativarCamposConsulta();
            desativarModificar();
            desativarFimBusca();

            txtCPF.requestFocus();

            btnFiltrar.setText("Buscar");

            emFiltro = true;

        } else {

            cpf = txtCPF.getText();
            nome = txtNome.getText();
            cargo = txtCargo.getText();

            cpf = tratamentoCPF(cpf);

            if (!cpf.equals("") && validaCPF(cpf) != null) {
                cpfValido = true;
            } else {
                cpfValido = false;
            }

            if (!cpf.equals("") && cpfValido) {
                con.defineModo("ANDCPF", cpf);
            } else if (!nome.equals("")) {
                con.defineModo("ANDNOME", nome);
            } else if (!cargo.equals("") && cargoValido == true) {
                con.defineModo("ANDCARGO", cargo);
            } else {
                con.defineModo("", "");
            }

            con.resetOffSet();

            if (!cpf.equals("") && cpfValido || !nome.equals("") || !cargo.equals("") && cargoValido == true) {

                ativarFimBusca();
                ativarExcluir();
                ativarModificar();

                carregarFuncionario(1, emFiltro);

                btnFiltrar.setText("Filtrar");

            } else {

                JOptionPane.showMessageDialog(null, "Digite um termo de pesquisa válido!");

            }

        }

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void txtCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCPFActionPerformed

        if (emFiltro) {
            btnFiltrarActionPerformed(evt);
        } else {
            txtNome.requestFocus();
        }

    }//GEN-LAST:event_txtCPFActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed

        if (emFiltro) {
            btnFiltrarActionPerformed(evt);
        } else {
            txtCargo.requestFocus();
        }


    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCargoActionPerformed

        if (!emFiltro) {
            txtSalario.requestFocus();
        } else {

            txtCargoFocusLost(null);

            if (cargoValido) {
                btnFiltrarActionPerformed(evt);
            }

        }

    }//GEN-LAST:event_txtCargoActionPerformed

    private void btnSairFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairFiltroActionPerformed
        con.defineModo("", "");
        con.resetOffSet();

        emFiltro = false;
        lblFiltro.setText("");

        carregarFuncionario(1, emFiltro);

        desativarFimBusca();
        ativarIncluir();

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnSairFiltroActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        String campos = "";
        boolean trocouNome = false;
        boolean trocouCargo = false;
        boolean trocouSalario = false;
        boolean updateOk;

        String cpf;
        String nome;
        int cargo;
        double salario;

        Funcionario fMod;

        if (btnModificar.getText().equals("Modificar")) {

            ativarCamposModificar();
            bloquearIncluirExcluir();
            desativarFiltragem();
            txtNome.requestFocus();

            btnModificar.setText("Gravar");

        } else {

            cpf = txtCPF.getText().trim();
            nome = txtNome.getText().trim();
            cargo = 0;
            salario = 0;

            fMod = validaCampos(cpf, nome, cargo, salario);

            if (fMod == null) {
                return;
            }

            String nomeModificado = fMod.getNome();
            int cargoModificado = fMod.getIdCargo();
            double salarioModificado = fMod.getSalario();

            if (!fMod.getNome().equals(funcAtual.getNome())) {
                campos = "nome = '" + nomeModificado + "'";
                trocouNome = true;
            }

            if (fMod.getIdCargo() != funcAtual.getIdCargo()) {
                if (trocouNome) {
                    campos += ", ";
                }
                campos += "cargo = " + cargoModificado;
                trocouCargo = true;

            }

            if (fMod.getSalario() != funcAtual.getSalario()) {
                if (trocouNome || trocouCargo) {
                    campos += ", ";
                }
                campos += "salario = " + salarioModificado;
                trocouSalario = true;
            }

            if (trocouNome || trocouCargo || trocouSalario) {

                updateOk = con.updateFuncionario(campos, funcAtual.getCpf());

                if (updateOk) {
                    JOptionPane.showMessageDialog(null, "Funcionario modificado com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao modificar funcionario!");
                }
                
                carregarUltimoFuncionario();

            }

            bloquearCampos();
            ativarIncluir();
            ativarExcluir();
            ativarFiltragem();

            btnModificar.setText("Modificar");

        }

        atualizarQuantidadeRegistros();
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnIncluir;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnProximo;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSairFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblDescCargo;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JLabel lblTotalRegistros;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtCargo;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables

    private void carregarFuncionario(int direcao, boolean emFiltro) {
        Funcionario func = con.buscarFuncionario(direcao);

        funcAtual = func;

        bloquearCampos();

        if (func == null) {

            if (emFiltro) {
                JOptionPane.showMessageDialog(null, "Não foram encontrados registros!");
            } else {
                JOptionPane.showMessageDialog(null, "Sem Funcionarios no banco!");
            }

            desativarBotoes();
            limparCampos();
            return;
        }

        ativarBotoes();

        atualizarQuantidadeRegistros();

        txtCPF.setText(formatarCPF(func.getCpf()));
        txtNome.setText(func.getNome());
        txtCargo.setText(String.valueOf(func.getIdCargo()));
        lblDescCargo.setText(func.getDescCargo());
        txtSalario.setText(String.valueOf(format.format(func.getSalario())));
    }

    private void limparCampos() {
        txtCPF.setText("");
        txtNome.setText("");
        limparCamposCargo();
        txtSalario.setText("");

    }

    private void limparCamposCargo() {
        txtCargo.setText("");
        lblDescCargo.setText("");
    }

    private void ativarCampos() {

        txtCPF.setEditable(true);
        txtNome.setEditable(true);
        txtCargo.setEditable(true);
        txtSalario.setEditable(true);

    }

    private void bloquearCampos() {
        txtCPF.setEditable(false);
        txtNome.setEditable(false);
        txtCargo.setEditable(false);
        txtSalario.setEditable(false);
    }

    private void desativarBotoes() {
        btnAnterior.setEnabled(false);
        btnProximo.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnFiltrar.setEnabled(false);
        btnModificar.setEnabled(false);
    }

    private void ativarBotoes() {
        btnAnterior.setEnabled(true);
        btnProximo.setEnabled(true);
        btnIncluir.setEnabled(true);
        ativarExcluir();
        btnFiltrar.setEnabled(true);
        btnModificar.setEnabled(true);
    }

    private void carregarUltimoFuncionario() {
        Funcionario func = con.carregarUltimoFuncionario();

        bloquearCampos();

        txtCPF.setText(formatarCPF(func.getCpf()));
        txtNome.setText(func.getNome());
        txtCargo.setText(String.valueOf(func.getIdCargo()));
        lblDescCargo.setText(func.getDescCargo());
        txtSalario.setText(String.valueOf(format.format(func.getSalario())));

    }

    private String tratamentoSalario(String texto) {

        texto = texto.replace(".", "");
        texto = texto.replace(",", ".");
        texto = texto.replace("R", "");
        texto = texto.replace("r", "");
        texto = texto.replace("$", "");
        texto = texto.replace(":", "");
        texto = texto.replace(" ", "");

        return texto;

    }

    private String tratamentoCPF(String cpf) {

        cpf = cpf.replace(".", "");
        cpf = cpf.replace("-", "");

        return cpf;
    }

    private void bloquearBotoesInsercao() {
        btnExcluir.setEnabled(false);
        btnModificar.setEnabled(false);
        btnFiltrar.setEnabled(false);
    }

    private void desbloquearBotoesInsercao() {
        btnExcluir.setEnabled(true);
        btnModificar.setEnabled(true);
        btnFiltrar.setEnabled(true);
    }

    private void ajustarInclusao(int i) {

        if (i == 1) {
            btnIncluir.setText("Incluir");
        } else {
            btnIncluir.setText("Gravar");
        }

    }

    private void ativarCamposConsulta() {
        txtCPF.setEditable(true);
        txtNome.setEditable(true);
        txtCargo.setEditable(true);
    }

    private Funcionario validaCampos(String cpf, String nome, int cargo, double salario) {

        Funcionario f;

        cpf = tratamentoCPF(cpf);
        cpf = validaCPF(cpf);

        if (cpf == null) {
            return null;
        }

        if (nome == null || nome.equals("")) {

            JOptionPane.showMessageDialog(null, "Digite um nome");
            txtNome.requestFocus();
            return null;

        }

        try {

            cargo = Integer.parseInt(txtCargo.getText().trim());

        } catch (NumberFormatException ex) {

            JOptionPane.showMessageDialog(null, "Digite um valor válido para cargo!");
            txtCargo.requestFocus();
            System.out.println(ex.getMessage());

            return null;
        }

        try {
            String campoSalario = txtSalario.getText().trim();

            campoSalario = tratamentoSalario(campoSalario);

            salario = Double.parseDouble(campoSalario);

            if (salario < 0) {

                JOptionPane.showMessageDialog(null, "Salario não pode ser negativo!");
                txtSalario.requestFocus();
                return null;

            }

        } catch (NumberFormatException ex) {

            JOptionPane.showMessageDialog(null, "Digite um valor válido para salario!");
            txtSalario.requestFocus();
            System.out.println(ex.getMessage());

            return null;
        }

        f = new Funcionario(cpf, nome, salario, cargo, cpf);

        return f;

    }

    private void atualizarQuantidadeRegistros() {

        long quantidadeRegistrosBanco = con.getTotalLinhas();
        long quantidadeFiltro;
        long linhaAtual;

        lblTotalRegistros.setText(quantidadeRegistrosBanco + " Registro(s) no Banco");

        if (emFiltro && !btnFiltrar.getText().equals("Buscar")) {
            quantidadeFiltro = con.getTotalLinhasNavegacao();
            linhaAtual = con.getOffset() + 1;

            lblFiltro.setText(linhaAtual + "/" + quantidadeFiltro + " linha(s) filtradas");
        }

    }

    private String validaCPF(String cpf) {
        if (cpf == null || cpf.equals("") || !cpf.matches("[1234567890]{11}")) {

            JOptionPane.showMessageDialog(null, "Digite um CPF válido!");
            txtCPF.requestFocus();
            return null;

        }

        return cpf;
    }

    private void ativarFimBusca() {
        btnSairFiltro.setEnabled(true);
    }

    private void desativarFimBusca() {
        btnSairFiltro.setEnabled(false);
    }

    private void bloquearIncluirExcluir() {
        btnIncluir.setEnabled(false);
        btnExcluir.setEnabled(false);
    }

    private void ativarExcluir() {
        btnExcluir.setEnabled(true);
    }

    private void ativarIncluir() {
        btnIncluir.setEnabled(true);
    }

    private void desativarModificar() {
        btnModificar.setEnabled(false);
    }

    private void ativarModificar() {
        btnModificar.setEnabled(true);
    }

    private void ativarCamposModificar() {
        txtNome.setEditable(true);
        txtCargo.setEditable(true);
        txtSalario.setEditable(true);
    }

    private void ajustarModificacao(int i) {
        if (i == 1) {
            btnModificar.setText("Modificar");
        } else {
            btnModificar.setText("Gravar");
        }
    }

    private void desativarFiltragem() {
        btnFiltrar.setEnabled(false);
        btnSairFiltro.setEnabled(false);
    }

    private void ativarFiltragem() {
        btnFiltrar.setEnabled(true);

        if (emFiltro && !con.getModo().equals("")) {
            btnSairFiltro.setEnabled(true);
        }
    }

    private void ajustarFiltro(int i) {
        if (i == 1) {
            btnFiltrar.setText("Filtrar");
        } else {
            btnModificar.setText("Buscar");
        }
    }

    private String formatarCPF(String cpf) {

        StringBuilder cpfFormatado = new StringBuilder();

        cpfFormatado.append(cpf.substring(0, 3));
        cpfFormatado.append(".");
        cpfFormatado.append(cpf.substring(3, 6));
        cpfFormatado.append(".");
        cpfFormatado.append(cpf.substring(6, 9));
        cpfFormatado.append("-");
        cpfFormatado.append(cpf.substring(9));

        return cpfFormatado.toString();

    }

}
